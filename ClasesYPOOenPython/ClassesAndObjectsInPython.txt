				POO EN PYTHON - TUTORIAL BY CLEARCODE

Source: https://www.youtube.com/watch?v=_vr5faCXFo8

				¿QUE ES UN OBJETO?

Un object podría decirse que es sólo un contenedor para variables(propiedades,atributos) y funciones(comportamientos como atacar,moverse,...)

Es totalmente posible tener varios objetos,cada uno con valores diferentes para sus propiedades,pero los métodos si que serán los mismos,ya que son objetos de una misma clase y comparten comportamiento.Sin embargo,cada método está ligado al objeto,y puede recibir argumentos con valores diferentes por cada objeto.Si que serán los mismos,pero se comportarán diferente también.
Asi pues,cada objeto es totalmente diferente en comportamiento y valores.

Además,cada objeto puede interactuar con otro objeto.Todo esto son las bases de la POO,hoy en dia es indispensable conocerla.

				OBJETS AS PROPERTIES OF ANOTHER OBJECT

TIP: un objeto puede tener una propiedad que sea otro objeto.Este concepto es clave para crear código mantenible y escalable:

class Menu():
  player = Player() <- la clase Menu tiene la propiedad player de tipo Player(la cual es un objeto y me da un total control sobre las clases Menu y Player

				¿QUE ES UNA CLASE?

Un clase,por el contrario,es el plano para crear objetos.Siempre que quiera crear un objeto,necesitaré una Clase.
Una clase también acepta argumentos para customizar el objeto que crea.Por ejemplo,podría establecer la health y energy de cada Monster:

class Monster():
  def __init__(self,health,energy):
    self.health = health
    self.energy = energy
  def attack(self):
    pass
  def move(self):
    pass

Ahora,al crear un objeto de clase Monster le puedo pasar valores:
monster1 = Monster(100,20)
monster2 = Monster(90,15)

Una clase también puede heredar de otra.Los objetos creados de esta clase tendrán los atributos y métodos de las dos clases.
Usar POO me permite organizar código complejo,además de hacerlo reusable.Además,muchas librerias me obligarán a usar clases.También me permiten cambiar el scope de propiedades o métodos,lo cual es muchas veces obligatorio o simplemente conveniente.

				__DUNDER__ METHODS - DOUBLE UNDERSCORE METHODS

Ojo,dunder stands for DoubleUNDERscore,es la unión de la D y de UNDER,no tiene nada que ver con la palabra DUNDER.Cualquier método que use dobles guiones bajos es un DUNDER METHOD.
IMPORTANTE: un Dunder Method es un método que no es callable por el user,sino que lo llama el programa cuando suceda algo en concreto(siempre habrá un disparador pues del dunder method).Por ejemplo:
__init__ : es llamado cuando un objeto es construido
__len__: es llamado cuando el objeto es pasado a la funcion len()
__abs__: es llamado cuando un objeto es pasado a la función abs()
Realmente no es nada complejo esto.Obviamente el más usado es __init__

NOTA: normalmente las clases no llevan atributos en Python,sino que los lleva el constructor mediante el dunde __init__.Interesante.

# con este dunder puedo sobrescribir lo que devuelva la ejecución de len()
  def __len__(self):
    return 53

# dado que sobreescribí el dunder __len__ dará 53
print(len(monster_01)) <- obviamente devuelve 53

IMPORTANTE: puedo ver todos los dunder methods que tiene un objeto usando el método dir.Esto es aplicable a todo objeto y realmente útil.Además,despues de los dunder también dice los campos de clase:

print(dir(monster_01))
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__len__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'attack', 'energy', 'health', 'move', 'name']

Fijate como tengo varios,incluso tengo __dir__ para poder sobrescribir esto jaja.El dunder __eq__ o __dict__ son muy interesantes
Incluso hay un dunder para poder ejecutar una instancia como si fuera un método:
def __call__(self):
  print('The monster was called')

monster_01() <- fijate que estoy llamando a la instancia con ()

Lo mismo para __add__:
# puedo sobrescribir lo que hará sumar algo sobre el objeto
  def __add__(self,other):
    return f'the monster healths in {other} quantity.Now is health is {self.health + other}'

IMPORTANTE: obviamente los más usados son __init__ y __str__ ,el cual en teoria imprime info sobre el objeto de una forma presentable(a no ser que se sobrescriba,claro):

 def __str__(self):
    return f'Hi!: I am the monster {self.name} with {self.health} of health'

Igual que en Java,por defecto se llama a éste método:
print(monster_01)
Aunque también lo puedo usar:
print(str(monster_01))
Sin sobrescribirlo da la dirección a memoria,que realmente no me vale para mucho.

						CLASSES IN DEEP

En Python todo es un object(y en Ruby),incluido los inbuilt strings,los integers,incluso las funciones son objetos(con lo que serán instancias de una clase Function o algo)
Recuerda también que un método pertenece a un objeto(da igual si el objeto lo creó Python)
Con todo esto en mente,en Python puedo hacer cosas como:
'casa'.upper() <- llamar a un método sobre el string inmediatamente(ya que es un object)
len('test') | len([1,2,3]) | len({a:1,b:2}) | len((1,3,2)) <- llamar a un método casi con cualquier tipo de objeto,ya que todo es un object
NOTA: (1,2,3) es una tupla y [1,2,3] es una lista.
En Python está el unpacking(destructuring de JS):
(a,b,c) = ('asinto','perez','alonso') 

Destacar también que en Python puedo almacenar en una variable/propiedad un método(ya que el método es un objeto).Esto me permite almacsenar en una propieda un método de otra clase:

# create a Monster class with a parameter called func,
class Monster:
    def __init__(self, func):
        self.func = func

# create a class called Attacks,that has 4 methods: bite,strike,slash and kick(they just print some str)
class Attacks:
    def bite(self):
        print('bitting...')
    def strike(self):
        print('striking...')
    def slash(self):
        print('slashing...')
    def kick(self):
        print('kicking...')

attacks = Attacks()
# fijate como acepta cualquier cosa como parametro de clase Python
monster = Monster(attacks.bite)
# realmente no tengo porque instanciar Attacks,lo puedo pasar a un Objeto llamando,ya que una Class tiene el método __call__
monster2 = Monster(Attacks().bite) # forma PRO TOTAL
# y llamo al método,muy asinto todo
monster.func()

Fijate en la forma PRO de pasar una clase a objeto simplemente llamandola,ya que tiene el dunder __call__ por ser una Class.

					CLASSES AND THE SCOPE OF THEM

Todo método tiene una referencia a la clase donde vive.Por ello es muy fácil obtener y cambiar atributos de clase(getter an setters)
Debido a esto los métodos no necesitan tanta ayuda de los parámetros,de global o de un return(aunque los puedo usar)
Los objects pueden ser influenciados desde el exterior, o desde el scope local de una funcion.Es decir,los objects en Python no están limitados por el scope local
Veamoslo en código mejor.

Problema con el ámbito de las variables(que es local):
def update_health(amount):
   health += amount <- health tiene un scope local

health = 10

print(health) <- dará error pues health no está definido
update_health(20)
print(health)

Solución,declararla global:
def update_health(amount):
  global health
  health += amount

SIN EMBARGO,LOS OBJETOS Y SUS ATRIBUTOS NO TIENEN UN SCOPE LOCAL,OJO
# objects doesn't have local scope for their attributes
def update_health_of_object(amount):
    monster.health += amount

class Monster:
    def __init__(self, health, energy):
        self.health = health
        self.energy = energy

monster = Monster(health=100, energy=50)
update_health_of_object(20) <- monster.health tiene scope global
print(monster.health)

Desde luego es muy interesante que las instancias tengan un scope global para sus propiedades.Y debido a esto puedo crear métodos en la clase que hagan scope a cualquier propiedad,incluso puedo usar return si es necesario:

  def __init__(self, health, energy):
        self.health = health
        self.energy = self.set_energy(energy)

    def update_energy(self, amount):
        self.energy += amount

    def set_energy(self,energy):
        new_energy = energy * 2
        return new_energy

TIP: fijate que en Python puedo pasarle arg = value o solo el value
hero = Hero(damage = 10,monster = monster)
Con esto terminamos con el scope,quedando bien claro que el scope de los atributos de una instancia es global,pero el de las variables sigue siendo local.Muy interesante.

				INHERITANCE	+ (herencia múltiple | simple)

La herencia es básicamente que una clase A pueda recibir todos los métodos y atributos(es decir,todo) de una clase B(al heredarla)

Una clase puede heredar de un número ilimitado de clases(herencia múltiple) heredando asi todos los métodos y atributos de,por ejemplo, 3 clases más(aparte de los de ella)
De la misma forma,una clase padre puede ser extendida por un numero ilimitado de subclases,no hay restricción en esto

Por todo esto,la herencia puede llegar a ser muy compleja.Sin embargo,la mayoría de las veces me valdrá con la herencia simple(A hereda sólo de una clase)

class Monster:
    def __init__(self, health, energy):
        self.health = health
        self.energy = energy

    def attack(self, amount, other):
        print(f'The monster has attacked!')
        print(f'{amount} damage was dealt')
        other.health -= amount
        self.energy -= 20

    def move(self, speed):
        print('The monster has moved')
        print(f'It is moving at a speed of {speed}')


class Shark(Monster):
    def __init__(self, speed, health, energy):
        super().__init__(health, energy)
        self.speed = speed

    def bite(self):
        print(f'The shark has bitten')
    # para sobrescribir un método simplemente lo llamo igual
    def move(self):
      print(f'The shark is moving at {self.speed} speed!')



shark = Shark(30,100,100)
shark2 = Shark(speed=30,health = 100,energy = 100)
shark.attack(10,shark2)
print(shark2.health)

Fijate como para sobrescribir solo hay que llamar a un método de la subclase igual que el de la clase padre y lo sobrescribirá.
Fijate también que si la clase padre llama al constructor con argumentos tengo que pasarlos desde la hija:

class Shark(Monster):
    def __init__(self, speed, health, energy):
        super().__init__(health, energy)

Otra forma,apuntando a una clase en concreto(aunque se suele usar super()).
class Shark(Monster):
    def __init__(self, speed, health, energy):
       Monster.__init__(self,health, energy)

En cuanto use herencia múltiple necesitaré la forma con super(),pero con herencia simple realmente puedo usar Class.__init__(self,*args).Sin embargo,como super tmb funciona con herencia simple no necesito usarla realmente.

NOTA: realmente puedo usar super() para hacer más cosas,pues es simplemente una referencia al padre:
super().move() <- puedo mover el padre
super().health = -10 <- puedo quitarle salud,...etc

No debo quedarme en que super se usa solo para pasar los args,es más que eso.

class Scorpion(Monster):
  def __init__(self,poison_dmg,scorpion_health,scorpion_energy):
    self.poison_dmg=poison_dmg
    super().__init__(scorpion_health,scorpion_energy)
    
  
  def attack(self):
    print(f'Scorpion attacking with an amount of {self.poison_dmg} poison damage')

scorpion = Scorpion(50,100,30)
## PUEDO SER MÁS CLARO CUANDO LO NECESITE ###
scorpion = Scorpion(poison_dmg = 50,scorpion_health = 100, scorpion_energy = 30)
scorpion.attack()
scorpion.move(15)
print(scorpion.energy)

NOTA: fijate que es mejor ser especifico y llamar a los args scorpion_health o scorpion_energy en vez de health,ya que es muy abstracto ese nombre de variable
Y de la misma forma es recomendable en los args decir a quien me estoy refiriendo

				COMPLEX INHERITANCE

Hasta ahora solo he visto herencia simple.Realmente una child class puede heredar de varias,haciendola superpoderosa.
A la hora de mandar args a los padres tengo que tener en cuenta el MRO(Method Resolution Order).Incluso lo puedo imprimir:

class Shark(Monster,Fish):
  def __init__(self,bite_strength,health, energy,speed,has_scales):
    super(Monster).__init__()
    
print(Shark.mro())

El resultado es Shark,Monster,Fish y object(el cual no importa ahora)
[<class '__main__.Shark'>, <class '__main__.Monster'>, <class '__main__.Fish'>, <class 'object'>]

Obviamente coge el orden de los argumentos,estando Monster primero y aún antes la propia child class

Y no sólo tengo que saber que la clase Monster va a llamar a Fish,sino que tendré que hacer uso de los **kwargs.
NOTA: el operador ** mete en un diccionario llamado kwargs.Es el operador unpacking/packing.LLamarlo una vez empaqueta,volver a llamarlo desempaqueta.

IMPORTANTE: **kwargs es un diccionario,en cuanto lo use tengo que pasar los argumentos asi(name = name,health = health).Como pares de key-value.Si no no los va a empaquetar


class Monster:
  def __init__(self, health, energy,**kwargs):
    print(kwargs)
    self.health = health
    self.energy = energy
    super().__init__(**kwargs)

  def attack(self, amount, other):
    print(f'The monster has attacked!')
    print(f'{amount} damage was dealt')
    other.health -= amount
    self.energy -= 20

  def move(self, speed):
    print('The monster has moved')
    print(f'It is moving at a speed of {speed}')

class Fish:
  def __init__(self, speed, has_scales,**kwargs):
    print(kwargs)
    self.speed = speed
    self.has_scales = has_scales
    super().__init__(**kwargs)

  def swim(self):
    print(f'The fish is swimming at a speed of {self.speed}')
   
   # mro stands for method resolution order 
class Shark(Monster,Fish):
  def __init__(self,bite_strength,health,energy,speed,has_scales):
    self.bite_strength = bite_strength
    super().__init__(
      health=health,
      energy=energy,
      speed=speed,
      has_scales=has_scales)
    
# print(Shark.mro())

shark = Shark(
  bite_strength = 50,
  health = 250,
  energy = 55,
  speed = 120,
  has_scales = True)
shark.swim()

Y por todo esto queda obvio que mucha gente llama a super.__init__() automáticamente y que en cuanto use herencia compuesta veré un montón de **kwargs por ahi.

				EXTRA PARTS FOR CLASSES IN PYTHON

PRIVATE ATTRIBUTES:es un simple atributo que no puede accesarse desde fuera de la clase.Por ejemplo un ID,que nunca deberia mutar.Para realizar esto se pone un underscore,pero realmente en Python no existe esto(siempre será público:
class Monster:
  def __init__(self, health, energy):
    self.health = health
    self.energy = energy
    #private attributes
    self._id = 5

HASATTR y SETATTR
hasattr(object,'attr') es igual que en JS el Object.hasOwnProperty('prop').Devuelve un boleano y es muy útil en condiciones por ello.
if hasattr(monster,'health'): do ....
En cuanto a setattr(object,'attr','value) permite reestablecer el valor de propiedades ya existentes en ese objeto o incluso crear otras:
setattr(monster,'weapon','teeth')
Si bien es lo mismo que hacer monster.weapon = 'teeth' es muy eficiente y útil,por ejemplo en bucles para insertar atributos masivamente : 
new_attributes = (['weapon','Axe'],['armor','Shield'],['potion','mana'])
for attr,value in new_attributes:
  setattr(monster,attr,value)
print(vars(monster))
Obviamente no se usa mucho,pero es bueno conocerlo

DOC: doc es un atributo dunder(__doc__) que en teoría explica qué hace la instancia.Por defecto siempre retorna un None,ya que hay que sobreescribirlo(es como el toString() de Java,etc)
Para sobrescribirlo siempre es en la primera linea de una clase,entre triples comillas:
class Monster:
 '''A monster is an object that does nothing,really'''
  ... more code ...

monster = Monster()
print(monster.__doc__) <- veré "A monster is an object ..."
Se usa mucho en equipos de trabajo para explicar a otros dev que hace la clase.Perfecto.Desde luego, Python es genial para algunas cosas.

Por último puedo imprimir la ayuda sobre un object con help(anything).Al loro con esto:
help(monster) <- veo los dunder y más info útil.Imprescindible



